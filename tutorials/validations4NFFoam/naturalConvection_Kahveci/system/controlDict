/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     4.1                                |
|   \\  /    A nd           | Web:         http://www.foam-extend.org         |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

libs
(
    "liblduSolvers.so"
    "libNF4Foam.so"
)

application     steadyStateNaturalConvection4NFFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         100;

deltaT          0.001;

writeControl    timeStep;

writeInterval   1000;

purgeWrite      3;

writeFormat     ascii;

writePrecision  6;

writeCompression compressed;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

InfoSwitches
{
    writePrecision  6;
    writeJobInfo    0;
    allowSystemOperations 1;
}

functions
{
    postProcess
    {
        functionObjectLibs	("libutilityFunctionObjects.so");
        type			coded;
        enabled			true;
        outputControl		outputTime;//timeStep;
        redirectType		postProcess;

        code
        #{
            std::ofstream output;
            output.open("postProcess.txt",std::ofstream::app);

            //- constants
            scalar rhobf = 997.1;
            scalar mubf = 9.09e-4;
            scalar kappabf = 0.613;
            scalar Cpbf = 4179.0;
            scalar betabf = 2.1e-4;
            scalar nubf = mubf/rhobf;
            scalar alphabf = kappabf/(rhobf*Cpbf);
            scalar deltaTemp = 10.0;
            scalar charL = 1.0;
            scalar g = 6.387e-6;

            scalar Prbf = nubf/alphabf;
            scalar Grbf = (g*betabf*deltaTemp*pow(charL,3)) / (pow(nubf,2));
            scalar Rabf = (g*betabf*deltaTemp*pow(charL,3)) / (nubf*alphabf);


            //- lookup fields
            const volScalarField& T = mesh().lookupObject<volScalarField>("T");
            const volScalarField& kappaEff = mesh().lookupObject<volScalarField>("kappaEff");
            surfaceScalarField gradT = fvc::snGrad(T);

            //- find id and compute Nusselt number
            label rightID = T.mesh().boundaryMesh().findPatchID("right");
            scalar rightArea = sum(T.mesh().magSf().boundaryField()[rightID]);
            scalar rightHeatFluxAvg = sum(kappaEff.boundaryField()[rightID]*gradT.boundaryField()[rightID]*T.mesh().magSf().boundaryField()[rightID])/rightArea;
            scalar righthAvg = rightHeatFluxAvg/deltaTemp;
            scalar NusseltAvg = (righthAvg*charL)/(kappabf);


            //- save data
            output << "Rabf: " << Rabf << "\n";
            output << "Nu: " << NusseltAvg << "\n";
            output.close();
        #};
    }

}

// ************************************************************************* //
